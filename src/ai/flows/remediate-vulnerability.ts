'use server';
/**
 * @fileOverview An AI agent that generates remediation plans for detected vulnerabilities.
 *
 * - remediateVulnerability - A function that generates a remediation plan.
 * - RemediateVulnerabilityInput - The input type for the remediateVulnerability function.
 * - RemediateVulnerabilityOutput - The return type for the remediateVulnerability function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RemediateVulnerabilityInputSchema = z.object({
  vulnerabilityType: z
    .string()
    .describe('The type of vulnerability detected (e.g., Privilege Escalation).'),
  details: z.string().describe('A detailed description of the vulnerability.'),
});
export type RemediateVulnerabilityInput = z.infer<
  typeof RemediateVulnerabilityInputSchema
>;

const RemediateVulnerabilityOutputSchema = z.object({
  remediationPlan: z
    .array(z.string())
    .describe(
      'A step-by-step plan to remediate the vulnerability. Include commands where applicable.'
    ),
  requiredTools: z
    .array(z.string())
    .describe('A list of tools or permissions required for the remediation.'),
});
export type RemediateVulnerabilityOutput = z.infer<
  typeof RemediateVulnerabilityOutputSchema
>;

export async function remediateVulnerability(
  input: RemediateVulnerabilityInput
): Promise<RemediateVulnerabilityOutput> {
  return remediateVulnerabilityFlow(input);
}

const prompt = ai.definePrompt({
  name: 'remediateVulnerabilityPrompt',
  input: {schema: RemediateVulnerabilityInputSchema},
  output: {schema: RemediateVulnerabilityOutputSchema},
  prompt: `You are a Senior Cybersecurity Analyst providing a remediation plan for a junior analyst.
  Based on the vulnerability details, generate a clear, actionable, step-by-step remediation plan.
  Where appropriate, include specific commands (e.g., PowerShell, bash) that the analyst can execute.

  Vulnerability Type: {{{vulnerabilityType}}}
  Details: {{{details}}}

  Provide a detailed remediation plan and a list of any required tools or permissions.
  `,
});

const remediateVulnerabilityFlow = ai.defineFlow(
  {
    name: 'remediateVulnerabilityFlow',
    inputSchema: RemediateVulnerabilityInputSchema,
    outputSchema: RemediateVulnerabilityOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
